{"version":3,"file":"mql.min.mjs","sources":["../node_modules/.pnpm/url-http@1.0.7/node_modules/url-http/lightweight.js","../node_modules/.pnpm/flattie@1.1.0/node_modules/flattie/dist/index.js","../node_modules/.pnpm/qss@2.0.3/node_modules/qss/dist/qss.m.js","../src/factory.js","../src/ky.js","../src/browser.js"],"sourcesContent":["'use strict'\n\nconst URL = globalThis ? globalThis.URL : require('url').URL\n\nconst REGEX_HTTP_PROTOCOL = /^https?:\\/\\//i\n\nmodule.exports = url => {\n  try {\n    const { href } = new URL(url)\n    return REGEX_HTTP_PROTOCOL.test(href) && href\n  } catch (err) {\n    return false\n  }\n}\n","function iter(output, nullish, sep, val, key) {\n\tvar k, pfx = key ? (key + sep) : key;\n\n\tif (val == null) {\n\t\tif (nullish) output[key] = val;\n\t} else if (typeof val != 'object') {\n\t\toutput[key] = val;\n\t} else if (Array.isArray(val)) {\n\t\tfor (k=0; k < val.length; k++) {\n\t\t\titer(output, nullish, sep, val[k], pfx + k);\n\t\t}\n\t} else {\n\t\tfor (k in val) {\n\t\t\titer(output, nullish, sep, val[k], pfx + k);\n\t\t}\n\t}\n}\n\nfunction flattie(input, glue, toNull) {\n\tvar output = {};\n\tif (typeof input == 'object') {\n\t\titer(output, !!toNull, glue || '.', input, '');\n\t}\n\treturn output;\n}\n\nexports.flattie = flattie;","export function encode(obj, pfx) {\n\tvar k, i, tmp, str='';\n\n\tfor (k in obj) {\n\t\tif ((tmp = obj[k]) !== void 0) {\n\t\t\tif (Array.isArray(tmp)) {\n\t\t\t\tfor (i=0; i < tmp.length; i++) {\n\t\t\t\t\tstr && (str += '&');\n\t\t\t\t\tstr += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr && (str += '&');\n\t\t\t\tstr += encodeURIComponent(k) + '=' + encodeURIComponent(tmp);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (pfx || '') + str;\n}\n\nfunction toValue(mix) {\n\tif (!mix) return '';\n\tvar str = decodeURIComponent(mix);\n\tif (str === 'false') return false;\n\tif (str === 'true') return true;\n\treturn (+str * 0 === 0) ? (+str) : str;\n}\n\nexport function decode(str) {\n\tvar tmp, k, out={}, arr=str.split('&');\n\n\twhile (tmp = arr.shift()) {\n\t\ttmp = tmp.split('=');\n\t\tk = tmp.shift();\n\t\tif (out[k] !== void 0) {\n\t\t\tout[k] = [].concat(out[k], toValue(tmp.shift()));\n\t\t} else {\n\t\t\tout[k] = toValue(tmp.shift());\n\t\t}\n\t}\n\n\treturn out;\n}\n","const ENDPOINT = {\n  FREE: 'https://api.microlink.io',\n  PRO: 'https://pro.microlink.io'\n}\n\nconst isObject = input => input !== null && typeof input === 'object'\n\nconst isBuffer = input =>\n  input != null &&\n  input.constructor != null &&\n  typeof input.constructor.isBuffer === 'function' &&\n  input.constructor.isBuffer(input)\n\nconst parseBody = (input, error, url) => {\n  try {\n    return JSON.parse(input)\n  } catch (_) {\n    const message = input || error.message\n\n    return {\n      status: 'error',\n      data: { url: message },\n      more: 'https://microlink.io/efatalclient',\n      code: 'EFATALCLIENT',\n      message,\n      url\n    }\n  }\n}\n\nconst factory = ({\n  VERSION,\n  MicrolinkError,\n  urlHttp,\n  stringify,\n  got,\n  flatten\n}) => {\n  const assertUrl = (url = '') => {\n    if (!urlHttp(url)) {\n      const message = `The \\`url\\` as \\`${url}\\` is not valid. Ensure it has protocol (http or https) and hostname.`\n      throw new MicrolinkError({\n        status: 'fail',\n        data: { url: message },\n        more: 'https://microlink.io/docs/api/api-parameters/url',\n        code: 'EINVALURLCLIENT',\n        message,\n        url\n      })\n    }\n  }\n\n  const mapRules = rules => {\n    if (!isObject(rules)) return\n    const flatRules = flatten(rules)\n    return Object.keys(flatRules).reduce((acc, key) => {\n      acc[`data.${key}`] = flatRules[key].toString()\n      return acc\n    }, {})\n  }\n\n  const fetchFromApi = async (apiUrl, opts = {}, retryCount = 0) => {\n    try {\n      const response = await got(apiUrl, opts)\n      return opts.responseType === 'buffer'\n        ? { body: response.body, response }\n        : { ...response.body, response }\n    } catch (err) {\n      const { response = {} } = err\n      const {\n        statusCode,\n        body: rawBody,\n        headers = {},\n        url: uri = apiUrl\n      } = response\n      const isBodyBuffer = isBuffer(rawBody)\n\n      const body =\n        isObject(rawBody) && !isBodyBuffer\n          ? rawBody\n          : parseBody(isBodyBuffer ? rawBody.toString() : rawBody, err, uri)\n\n      if (body.code === 'EFATALCLIENT' && retryCount++ < 2) {\n        return fetchFromApi(apiUrl, opts, retryCount)\n      }\n\n      throw new MicrolinkError({\n        ...body,\n        message: body.message,\n        url: uri,\n        statusCode,\n        headers\n      })\n    }\n  }\n\n  const getApiUrl = (\n    url,\n    { data, apiKey, endpoint, retry, cache, ...opts } = {},\n    { responseType = 'json', headers: gotHeaders, ...gotOpts } = {}\n  ) => {\n    const isPro = !!apiKey\n    const apiEndpoint = endpoint || ENDPOINT[isPro ? 'PRO' : 'FREE']\n\n    const apiUrl = `${apiEndpoint}?${stringify({\n      url,\n      ...mapRules(data),\n      ...flatten(opts)\n    })}`\n\n    const headers = isPro\n      ? { ...gotHeaders, 'x-api-key': apiKey }\n      : { ...gotHeaders }\n    return [apiUrl, { ...gotOpts, responseType, cache, retry, headers }]\n  }\n\n  const createMql = defaultOpts => async (url, opts, gotOpts) => {\n    assertUrl(url)\n    const [apiUrl, fetchOpts] = getApiUrl(url, opts, {\n      ...defaultOpts,\n      ...gotOpts\n    })\n    return fetchFromApi(apiUrl, fetchOpts)\n  }\n\n  const mql = createMql()\n  mql.MicrolinkError = MicrolinkError\n  mql.getApiUrl = getApiUrl\n  mql.fetchFromApi = fetchFromApi\n  mql.mapRules = mapRules\n  mql.version = VERSION\n  mql.stream = got.stream\n  mql.buffer = createMql({ responseType: 'buffer' })\n\n  return mql\n}\n\nmodule.exports = factory\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ky = {}));\n})(this, (function (exports) { 'use strict';\n\n    // eslint-lint-disable-next-line @typescript-eslint/naming-convention\n    class HTTPError extends Error {\n        constructor(response, request, options) {\n            const code = (response.status || response.status === 0) ? response.status : '';\n            const title = response.statusText || '';\n            const status = `${code} ${title}`.trim();\n            const reason = status ? `status code ${status}` : 'an unknown error';\n            super(`Request failed with ${reason}`);\n            this.name = 'HTTPError';\n            this.response = response;\n            this.request = request;\n            this.options = options;\n        }\n    }\n\n    class TimeoutError extends Error {\n        constructor(request) {\n            super('Request timed out');\n            this.name = 'TimeoutError';\n            this.request = request;\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const isObject = (value) => value !== null && typeof value === 'object';\n\n    const validateAndMerge = (...sources) => {\n        for (const source of sources) {\n            if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n                throw new TypeError('The `options` argument must be an object');\n            }\n        }\n        return deepMerge({}, ...sources);\n    };\n    const mergeHeaders = (source1 = {}, source2 = {}) => {\n        const result = new globalThis.Headers(source1);\n        const isHeadersInstance = source2 instanceof globalThis.Headers;\n        const source = new globalThis.Headers(source2);\n        for (const [key, value] of source.entries()) {\n            if ((isHeadersInstance && value === 'undefined') || value === undefined) {\n                result.delete(key);\n            }\n            else {\n                result.set(key, value);\n            }\n        }\n        return result;\n    };\n    // TODO: Make this strongly-typed (no `any`).\n    const deepMerge = (...sources) => {\n        let returnValue = {};\n        let headers = {};\n        for (const source of sources) {\n            if (Array.isArray(source)) {\n                if (!Array.isArray(returnValue)) {\n                    returnValue = [];\n                }\n                returnValue = [...returnValue, ...source];\n            }\n            else if (isObject(source)) {\n                for (let [key, value] of Object.entries(source)) {\n                    if (isObject(value) && key in returnValue) {\n                        value = deepMerge(returnValue[key], value);\n                    }\n                    returnValue = { ...returnValue, [key]: value };\n                }\n                if (isObject(source.headers)) {\n                    headers = mergeHeaders(headers, source.headers);\n                    returnValue.headers = headers;\n                }\n            }\n        }\n        return returnValue;\n    };\n\n    const supportsAbortController = typeof globalThis.AbortController === 'function';\n    const supportsStreams = typeof globalThis.ReadableStream === 'function';\n    const supportsFormData = typeof globalThis.FormData === 'function';\n    const requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\n    const responseTypes = {\n        json: 'application/json',\n        text: 'text/*',\n        formData: 'multipart/form-data',\n        arrayBuffer: '*/*',\n        blob: '*/*',\n    };\n    // The maximum value of a 32bit int (see issue #117)\n    const maxSafeTimeout = 2147483647;\n    const stop = Symbol('stop');\n\n    const normalizeRequestMethod = (input) => requestMethods.includes(input) ? input.toUpperCase() : input;\n    const retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\n    const retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\n    const retryAfterStatusCodes = [413, 429, 503];\n    const defaultRetryOptions = {\n        limit: 2,\n        methods: retryMethods,\n        statusCodes: retryStatusCodes,\n        afterStatusCodes: retryAfterStatusCodes,\n        maxRetryAfter: Number.POSITIVE_INFINITY,\n    };\n    const normalizeRetryOptions = (retry = {}) => {\n        if (typeof retry === 'number') {\n            return {\n                ...defaultRetryOptions,\n                limit: retry,\n            };\n        }\n        if (retry.methods && !Array.isArray(retry.methods)) {\n            throw new Error('retry.methods must be an array');\n        }\n        if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n            throw new Error('retry.statusCodes must be an array');\n        }\n        return {\n            ...defaultRetryOptions,\n            ...retry,\n            afterStatusCodes: retryAfterStatusCodes,\n        };\n    };\n\n    // `Promise.race()` workaround (#91)\n    const timeout = async (request, abortController, options) => new Promise((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n            if (abortController) {\n                abortController.abort();\n            }\n            reject(new TimeoutError(request));\n        }, options.timeout);\n        void options\n            .fetch(request)\n            .then(resolve)\n            .catch(reject)\n            .then(() => {\n            clearTimeout(timeoutId);\n        });\n    });\n    const delay = async (ms) => new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n\n    class Ky {\n        // eslint-disable-next-line complexity\n        constructor(input, options = {}) {\n            var _a, _b, _c;\n            this._retryCount = 0;\n            this._input = input;\n            this._options = {\n                // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n                credentials: this._input.credentials || 'same-origin',\n                ...options,\n                headers: mergeHeaders(this._input.headers, options.headers),\n                hooks: deepMerge({\n                    beforeRequest: [],\n                    beforeRetry: [],\n                    beforeError: [],\n                    afterResponse: [],\n                }, options.hooks),\n                method: normalizeRequestMethod((_a = options.method) !== null && _a !== void 0 ? _a : this._input.method),\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                prefixUrl: String(options.prefixUrl || ''),\n                retry: normalizeRetryOptions(options.retry),\n                throwHttpErrors: options.throwHttpErrors !== false,\n                timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n                fetch: (_b = options.fetch) !== null && _b !== void 0 ? _b : globalThis.fetch.bind(globalThis),\n            };\n            if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n                throw new TypeError('`input` must be a string, URL, or Request');\n            }\n            if (this._options.prefixUrl && typeof this._input === 'string') {\n                if (this._input.startsWith('/')) {\n                    throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n                }\n                if (!this._options.prefixUrl.endsWith('/')) {\n                    this._options.prefixUrl += '/';\n                }\n                this._input = this._options.prefixUrl + this._input;\n            }\n            if (supportsAbortController) {\n                this.abortController = new globalThis.AbortController();\n                if (this._options.signal) {\n                    this._options.signal.addEventListener('abort', () => {\n                        this.abortController.abort();\n                    });\n                }\n                this._options.signal = this.abortController.signal;\n            }\n            this.request = new globalThis.Request(this._input, this._options);\n            if (this._options.searchParams) {\n                // eslint-disable-next-line unicorn/prevent-abbreviations\n                const textSearchParams = typeof this._options.searchParams === 'string'\n                    ? this._options.searchParams.replace(/^\\?/, '')\n                    : new URLSearchParams(this._options.searchParams).toString();\n                // eslint-disable-next-line unicorn/prevent-abbreviations\n                const searchParams = '?' + textSearchParams;\n                const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n                // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n                if (((supportsFormData && this._options.body instanceof globalThis.FormData)\n                    || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n                    this.request.headers.delete('content-type');\n                }\n                this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n            }\n            if (this._options.json !== undefined) {\n                this._options.body = JSON.stringify(this._options.json);\n                this.request.headers.set('content-type', (_c = this._options.headers.get('content-type')) !== null && _c !== void 0 ? _c : 'application/json');\n                this.request = new globalThis.Request(this.request, { body: this._options.body });\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/promise-function-async\n        static create(input, options) {\n            const ky = new Ky(input, options);\n            const fn = async () => {\n                if (ky._options.timeout > maxSafeTimeout) {\n                    throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n                }\n                // Delay the fetch so that body method shortcuts can set the Accept header\n                await Promise.resolve();\n                let response = await ky._fetch();\n                for (const hook of ky._options.hooks.afterResponse) {\n                    // eslint-disable-next-line no-await-in-loop\n                    const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n                    if (modifiedResponse instanceof globalThis.Response) {\n                        response = modifiedResponse;\n                    }\n                }\n                ky._decorateResponse(response);\n                if (!response.ok && ky._options.throwHttpErrors) {\n                    let error = new HTTPError(response, ky.request, ky._options);\n                    for (const hook of ky._options.hooks.beforeError) {\n                        // eslint-disable-next-line no-await-in-loop\n                        error = await hook(error);\n                    }\n                    throw error;\n                }\n                // If `onDownloadProgress` is passed, it uses the stream API internally\n                /* istanbul ignore next */\n                if (ky._options.onDownloadProgress) {\n                    if (typeof ky._options.onDownloadProgress !== 'function') {\n                        throw new TypeError('The `onDownloadProgress` option must be a function');\n                    }\n                    if (!supportsStreams) {\n                        throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n                    }\n                    return ky._stream(response.clone(), ky._options.onDownloadProgress);\n                }\n                return response;\n            };\n            const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n            const result = (isRetriableMethod ? ky._retry(fn) : fn());\n            for (const [type, mimeType] of Object.entries(responseTypes)) {\n                result[type] = async () => {\n                    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                    ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n                    const awaitedResult = await result;\n                    const response = awaitedResult.clone();\n                    if (type === 'json') {\n                        if (response.status === 204) {\n                            return '';\n                        }\n                        if (options.parseJson) {\n                            return options.parseJson(await response.text());\n                        }\n                    }\n                    return response[type]();\n                };\n            }\n            return result;\n        }\n        _calculateRetryDelay(error) {\n            this._retryCount++;\n            if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n                if (error instanceof HTTPError) {\n                    if (!this._options.retry.statusCodes.includes(error.response.status)) {\n                        return 0;\n                    }\n                    const retryAfter = error.response.headers.get('Retry-After');\n                    if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n                        let after = Number(retryAfter);\n                        if (Number.isNaN(after)) {\n                            after = Date.parse(retryAfter) - Date.now();\n                        }\n                        else {\n                            after *= 1000;\n                        }\n                        if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n                            return 0;\n                        }\n                        return after;\n                    }\n                    if (error.response.status === 413) {\n                        return 0;\n                    }\n                }\n                const BACKOFF_FACTOR = 0.3;\n                return BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n            }\n            return 0;\n        }\n        _decorateResponse(response) {\n            if (this._options.parseJson) {\n                response.json = async () => this._options.parseJson(await response.text());\n            }\n            return response;\n        }\n        async _retry(fn) {\n            try {\n                return await fn();\n                // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n            }\n            catch (error) {\n                const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n                if (ms !== 0 && this._retryCount > 0) {\n                    await delay(ms);\n                    for (const hook of this._options.hooks.beforeRetry) {\n                        // eslint-disable-next-line no-await-in-loop\n                        const hookResult = await hook({\n                            request: this.request,\n                            options: this._options,\n                            error: error,\n                            retryCount: this._retryCount,\n                        });\n                        // If `stop` is returned from the hook, the retry process is stopped\n                        if (hookResult === stop) {\n                            return;\n                        }\n                    }\n                    return this._retry(fn);\n                }\n                throw error;\n            }\n        }\n        async _fetch() {\n            for (const hook of this._options.hooks.beforeRequest) {\n                // eslint-disable-next-line no-await-in-loop\n                const result = await hook(this.request, this._options);\n                if (result instanceof Request) {\n                    this.request = result;\n                    break;\n                }\n                if (result instanceof Response) {\n                    return result;\n                }\n            }\n            if (this._options.timeout === false) {\n                return this._options.fetch(this.request.clone());\n            }\n            return timeout(this.request.clone(), this.abortController, this._options);\n        }\n        /* istanbul ignore next */\n        _stream(response, onDownloadProgress) {\n            const totalBytes = Number(response.headers.get('content-length')) || 0;\n            let transferredBytes = 0;\n            return new globalThis.Response(new globalThis.ReadableStream({\n                async start(controller) {\n                    const reader = response.body.getReader();\n                    if (onDownloadProgress) {\n                        onDownloadProgress({ percent: 0, transferredBytes: 0, totalBytes }, new Uint8Array());\n                    }\n                    async function read() {\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        if (onDownloadProgress) {\n                            transferredBytes += value.byteLength;\n                            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n                            onDownloadProgress({ percent, transferredBytes, totalBytes }, value);\n                        }\n                        controller.enqueue(value);\n                        await read();\n                    }\n                    await read();\n                },\n            }));\n        }\n    }\n\n    /*! MIT License © Sindre Sorhus */\n    const createInstance = (defaults) => {\n        // eslint-disable-next-line @typescript-eslint/promise-function-async\n        const ky = (input, options) => Ky.create(input, validateAndMerge(defaults, options));\n        for (const method of requestMethods) {\n            // eslint-disable-next-line @typescript-eslint/promise-function-async\n            ky[method] = (input, options) => Ky.create(input, validateAndMerge(defaults, options, { method }));\n        }\n        ky.create = (newDefaults) => createInstance(validateAndMerge(newDefaults));\n        ky.extend = (newDefaults) => createInstance(validateAndMerge(defaults, newDefaults));\n        ky.stop = stop;\n        return ky;\n    };\n    const ky = createInstance();\n\n    exports.HTTPError = HTTPError;\n    exports.TimeoutError = TimeoutError;\n    exports[\"default\"] = ky;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","'use strict'\n\nconst urlHttp = require('url-http/lightweight')\nconst { flattie: flatten } = require('flattie')\nconst { encode: stringify } = require('qss')\n\nconst factory = require('./factory')\nconst { default: ky } = require('./ky')\n\nclass MicrolinkError extends Error {\n  constructor (props) {\n    super()\n    this.name = 'MicrolinkError'\n    Object.assign(this, props)\n    this.description = this.message\n    this.message = this.code\n      ? `${this.code}, ${this.description}`\n      : this.description\n  }\n}\n\nconst got = async (url, opts) => {\n  try {\n    if (opts.timeout === undefined) opts.timeout = false\n    const response = await ky(url, opts)\n    const body = await response.json()\n    const { headers, status: statusCode } = response\n    return { url: response.url, body, headers, statusCode }\n  } catch (err) {\n    if (err.response) {\n      const { response } = err\n      err.response = {\n        ...response,\n        headers: Array.from(response.headers.entries()).reduce(\n          (acc, [key, value]) => {\n            acc[key] = value\n            return acc\n          },\n          {}\n        ),\n        statusCode: response.status,\n        body: await response.text()\n      }\n    }\n    throw err\n  }\n}\n\nmodule.exports = factory({\n  MicrolinkError,\n  urlHttp,\n  stringify,\n  got,\n  flatten,\n  VERSION: '__MQL_VERSION__'\n})\n"],"names":["URL","globalThis","REGEX_HTTP_PROTOCOL","iter","output","nullish","sep","val","key","k","pfx","Array","isArray","length","toValue","mix","str","decodeURIComponent","dist","flattie","input","glue","toNull","obj","i","tmp","encodeURIComponent","out","arr","split","shift","concat","ENDPOINT","FREE","PRO","isObject","factory_1","VERSION","MicrolinkError","urlHttp","stringify","got","flatten","mapRules","rules","flatRules","Object","keys","reduce","acc","toString","fetchFromApi","async","apiUrl","opts","retryCount","response","responseType","body","err","statusCode","rawBody","headers","url","uri","isBodyBuffer","constructor","isBuffer","error","JSON","parse","_","message","status","data","more","code","parseBody","getApiUrl","apiKey","endpoint","retry","cache","gotHeaders","gotOpts","isPro","createMql","defaultOpts","assertUrl","fetchOpts","mql","version","stream","buffer","exports","HTTPError","Error","request","options","statusText","trim","super","this","name","TimeoutError","value","validateAndMerge","sources","source","TypeError","deepMerge","mergeHeaders","source1","source2","result","Headers","isHeadersInstance","entries","undefined","delete","set","returnValue","supportsAbortController","AbortController","supportsStreams","ReadableStream","supportsFormData","FormData","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","maxSafeTimeout","stop","Symbol","normalizeRequestMethod","includes","toUpperCase","retryAfterStatusCodes","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","maxRetryAfter","Number","POSITIVE_INFINITY","normalizeRetryOptions","timeout","abortController","Promise","resolve","reject","timeoutId","setTimeout","abort","fetch","then","catch","clearTimeout","delay","ms","Ky","_a","_b","_c","_retryCount","_input","_options","credentials","hooks","beforeRequest","beforeRetry","beforeError","afterResponse","method","prefixUrl","String","throwHttpErrors","bind","Request","startsWith","endsWith","signal","addEventListener","searchParams","replace","URLSearchParams","get","static","ky","fn","RangeError","_fetch","hook","modifiedResponse","_decorateResponse","clone","Response","ok","onDownloadProgress","_stream","toLowerCase","_retry","type","mimeType","parseJson","_calculateRetryDelay","retryAfter","after","isNaN","Date","now","Math","min","totalBytes","transferredBytes","controller","reader","getReader","read","done","close","byteLength","percent","enqueue","Uint8Array","createInstance","defaults","create","newDefaults","extend","defineProperty","factory","href","test","require$$1","encode","require$$2","require$$3","default","require$$4","props","assign","description","browser","from"],"mappings":"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"}